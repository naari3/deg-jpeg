{"version":3,"sources":["store/status/actions/index.ts","store/status/selectors/index.ts","store/status/reducers/index.ts","useJpeg.ts","components/Previewer.tsx","components/ImageFileLoader.tsx","components/QualitySelector.tsx","App.tsx","serviceWorker.ts","store/index.ts","index.tsx"],"names":["actionCreator","actionCreatorFactory","ChangeImageUrl","ChangeQuality","AddJpeg","ChangeJpegSet","GetStatus","createSelector","state","status","initialState","url","quality","jpegs","reducer","action","isType","produce","draft","payload","push","src","srces","map","s","loadImage","Promise","resolve","reject","img","Image","onload","onerror","e","createJpeg","a","async","canvas","document","createElement","image","width","naturalWidth","height","naturalHeight","ctx","getContext","drawImage","toDataURL","Previewer","dispatch","useDispatch","useState","loading","setLoading","error","setError","useSelector","getJpeg","useCallback","Array","from","length","reduce","prarr","arr","slice","message","useJpeg","useEffect","className","alt","ImageFileLoader","type","onChange","target","files","file","includes","alert","value","URL","createObjectURL","QualitySelector","currentQuality","setCurrentQuality","previousQuality","setPreviousQuality","setTimeout","defaultValue","min","max","step","parseFloat","App","Boolean","window","location","hostname","match","reducers","combineReducers","Store","createStore","composeWithDevTools","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e1c290e.chunk.js","sourcesContent":["import { actionCreatorFactory } from \"typescript-fsa\";\n\nconst actionCreator = actionCreatorFactory(\"JPEG\");\n\nexport const ChangeImageUrl = actionCreator<{ url: string }>(\"CHANGE_IMAGE\");\nexport const ChangeQuality = actionCreator<{ quality: number }>(\n  \"CHANGE_QUALITY\"\n);\nexport const AddJpeg = actionCreator<{ src: string }>(\"ADD_JPEG\");\nexport const ChangeJpegSet = actionCreator<{ srces: string[] }>(\n  \"CHANGE_JPEG_SET\"\n);\n","import { createSelector } from \"reselect\";\nimport { State } from \"../..\";\n\nimport { Status } from \"..\";\n\nexport const GetStatus = createSelector(\n  (state: State) => state.status,\n  (status: Status) => status\n);\n","import { Reducer } from \"redux\";\nimport { isType } from \"typescript-fsa\";\nimport { produce } from \"immer\";\n\nimport { Status } from \"..\";\nimport { ChangeImageUrl, ChangeQuality, AddJpeg, ChangeJpegSet } from \"..\";\n\nconst initialState: Status = { url: \"\", quality: 0.92, jpegs: [] };\n\nexport const reducer: Reducer<Status> = (state = initialState, action) => {\n  if (isType(action, ChangeImageUrl)) {\n    return produce(state, draft => {\n      draft.url = action.payload.url;\n    });\n  }\n  if (isType(action, ChangeQuality)) {\n    return produce(state, draft => {\n      draft.quality = action.payload.quality;\n    });\n  }\n  if (isType(action, AddJpeg)) {\n    return produce(state, draft => {\n      draft.jpegs.push(action.payload.src);\n    });\n  }\n  if (isType(action, ChangeJpegSet)) {\n    return produce(state, draft => {\n      draft.jpegs = action.payload.srces.map(s => s);\n    });\n  }\n  return state;\n};\n\nexport default reducer;\n","import { useState, useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Status, GetStatus, ChangeJpegSet } from \"./store/status\";\n\nconst loadImage = (src: string) => {\n  return new Promise<HTMLImageElement>((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => resolve(img);\n    img.onerror = e => reject(e);\n    img.src = src;\n  });\n};\n\nconst createJpeg = async (src: string, quality: number) => {\n  const canvas = document.createElement(\"canvas\");\n  const image = await loadImage(src);\n  canvas.width = image.naturalWidth;\n  canvas.height = image.naturalHeight;\n  const ctx = canvas.getContext(\"2d\");\n  ctx?.drawImage(image, 0, 0);\n  return canvas.toDataURL(\"image/jpeg\", quality);\n};\n\nexport const useJpeg = (): [Status, () => Promise<void>, boolean, string] => {\n  const dispatch = useDispatch();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const status = useSelector(GetStatus);\n\n  const getJpeg = useCallback(async () => {\n    setLoading(true);\n    try {\n      const srces = await Array.from({ length: 10 })\n        .map(() => \"\")\n        .reduce(async prarr => {\n          const arr = await prarr;\n          arr.push(await createJpeg(arr.slice(-1)[0], status.quality));\n          return arr;\n        }, Promise.resolve([status.url]));\n\n      setLoading(false);\n\n      dispatch(ChangeJpegSet({ srces }));\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n    }\n  }, [status.url, status.quality, dispatch]);\n\n  return [status, getJpeg, loading, error];\n};\n","import React, { useEffect } from \"react\";\nimport { Status } from \"../store/status\";\nimport { useJpeg } from \"../useJpeg\";\n\nconst Previewer: React.FC = () => {\n  const [status, getJpeg, loading] = useJpeg();\n\n  useEffect(() => {\n    getJpeg();\n  }, [getJpeg]);\n\n  return (\n    <div className=\"Previewer\">\n      <img src={status.jpegs.slice(-1)[0]} alt=\"\" />\n      <p>{loading ? \"loading\" : \"　\"}</p>\n    </div>\n  );\n};\n\nexport default Previewer;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { ChangeImageUrl } from \"../store/status\";\n\nconst ImageFileLoader: React.FC = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"ImageFileLoader\">\n      <input\n        type=\"file\"\n        onChange={e => {\n          if (e.target.files === null) return;\n\n          const file = e.target.files[0];\n          if (!file.type.includes(\"image/\")) {\n            alert(\"画像しか選択できません\");\n            e.target.value = \"\";\n            return;\n          }\n\n          const url = URL.createObjectURL(file);\n\n          dispatch(ChangeImageUrl({ url }));\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ImageFileLoader;\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ChangeQuality, GetStatus } from \"../store/status\";\n\nconst QualitySelector: React.FC = () => {\n  const dispatch = useDispatch();\n  const status = useSelector(GetStatus);\n\n  const [currentQuality, setCurrentQuality] = useState(status.quality);\n  const [previousQuality, setPreviousQuality] = useState(status.quality);\n\n  useEffect(() => {\n    // wait for user input completion\n    setTimeout(() => {\n      if (currentQuality === previousQuality) {\n        dispatch(ChangeQuality({ quality: previousQuality }));\n      }\n      setPreviousQuality(currentQuality);\n    }, 200);\n  }, [currentQuality, previousQuality, dispatch]);\n\n  return (\n    <input\n      type=\"range\"\n      defaultValue={status.quality}\n      min={0.0}\n      max={1.0}\n      step={0.01}\n      onChange={e => {\n        const currentQuality = parseFloat(e.target.value);\n        setCurrentQuality(currentQuality);\n      }}\n    />\n  );\n};\n\nexport default QualitySelector;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Previewer from \"./components/Previewer\";\nimport ImageFileLoader from \"./components/ImageFileLoader\";\nimport QualitySelector from \"./components/QualitySelector\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Previewer />\n      <ImageFileLoader />\n      <QualitySelector />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport status from \"./status\";\n\nconst reducers = combineReducers({ status });\n\nexport const Store = createStore(reducers, composeWithDevTools());\n\nexport type State = ReturnType<typeof Store.getState>;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Store } from \"./store\";\n\nReactDOM.render(\n  <Provider store={Store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}